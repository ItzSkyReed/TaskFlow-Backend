"""Group permissions and refactor

Revision ID: 6d8ce3b30d45
Revises: 79220f938232
Create Date: 2025-08-13 13:53:49.958275

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "6d8ce3b30d45"
down_revision: Union[str, Sequence[str], None] = "79220f938232"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "group_join_requests",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("group_id", sa.UUID(), nullable=False),
        sa.Column("requester_id", sa.UUID(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("PENDING", "APPROVED", "REJECTED", name="join_request_status"),
            server_default=sa.text("'PENDING'::join_request_status"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["group_id"], ["groups.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["requester_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "uq_group_join_request_pending",
        "group_join_requests",
        ["group_id", "requester_id"],
        unique=True,
        postgresql_where=sa.text("status = 'PENDING'::join_request_status"),
    )
    op.create_table(
        "group_user_permissions",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("group_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column(
            "permission",
            sa.Enum(
                "INVITE_MEMBERS",
                "KICK_MEMBERS",
                "ACCEPT_JOIN_REQUESTS",
                "MANAGE_GROUP",
                "MANAGE_MEMBERS",
                "MANAGE_TASKS",
                "FULL_ACCESS",
                name="group_permission",
            ),
            nullable=False,
        ),
        sa.Column("granted_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("granted_by", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["granted_by"], ["users.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["group_id"], ["groups.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("group_id", "user_id", "permission", name="uq_group_user_permission"),
    )
    op.create_index(
        op.f("ix_group_user_permissions_group_id"),
        "group_user_permissions",
        ["group_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_group_user_permissions_user_id"),
        "group_user_permissions",
        ["user_id"],
        unique=False,
    )
    op.add_column(
        "groups",
        sa.Column("has_avatar", sa.Boolean(), server_default=sa.text("false"), nullable=False),
    )
    op.add_column(
        "groups",
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
    )
    op.drop_column("groups", "description")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "groups",
        sa.Column("description", sa.VARCHAR(length=5000), autoincrement=False, nullable=True),
    )
    op.drop_column("groups", "created_at")
    op.drop_column("groups", "has_avatar")
    op.drop_index(op.f("ix_group_user_permissions_user_id"), table_name="group_user_permissions")
    op.drop_index(op.f("ix_group_user_permissions_group_id"), table_name="group_user_permissions")
    op.drop_table("group_user_permissions")
    op.drop_index(
        "uq_group_join_request_pending",
        table_name="group_join_requests",
        postgresql_where=sa.text("status = 'PENDING'::join_request_status"),
    )
    op.drop_table("group_join_requests")
    # ### end Alembic commands ###
