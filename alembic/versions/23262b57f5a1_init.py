"""Init

Revision ID: 23262b57f5a1
Revises: 
Create Date: 2025-08-03 15:35:51.515734

"""
from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = '23262b57f5a1'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('login', sa.String(length=64), nullable=False),
    sa.Column('email', sa.String(length=319), nullable=False),
    sa.Column('hashed_password', sa.String(length=128), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_login'), 'users', ['login'], unique=True)
    op.create_table('groups',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.Column('description', sa.String(length=5000), nullable=True),
    sa.Column('creator_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_groups_creator_id'), 'groups', ['creator_id'], unique=False)
    op.create_index(op.f('ix_groups_name'), 'groups', ['name'], unique=False)
    op.create_table('user_profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.Column('discord_id', sa.BIGINT(), nullable=True),
    sa.Column('discord_username', sa.String(length=32), nullable=True),
    sa.Column('telegram_id', sa.BIGINT(), nullable=True),
    sa.Column('telegram_username', sa.String(length=32), nullable=True),
    sa.CheckConstraint('\n            (telegram_id IS NULL AND telegram_username IS NULL)\n            OR\n            (telegram_id IS NOT NULL AND telegram_username IS NOT NULL)\n            ', name='ck_telegram_fields_null_together'),
    sa.ForeignKeyConstraint(['id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('discord_id'),
    sa.UniqueConstraint('discord_username'),
    sa.UniqueConstraint('telegram_id')
    )
    op.create_index(op.f('ix_user_profiles_name'), 'user_profiles', ['name'], unique=False)
    op.create_table('group_invitations',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('group_id', sa.UUID(), nullable=False),
    sa.Column('inviter_id', sa.UUID(), nullable=False),
    sa.Column('invitee_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'ACCEPTED', 'REJECTED', name='status'), server_default=sa.text("'PENDING'::status"), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['invitee_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['inviter_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('uq_group_invitation_pending', 'group_invitations', ['group_id', 'invitee_id'], unique=True, postgresql_where=sa.text("status = 'PENDING'::status"))
    op.create_table('group_members',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('group_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('joined_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('group_id', 'user_id', name='uq_group_members_group_user')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('group_members')
    op.drop_index('uq_group_invitation_pending', table_name='group_invitations', postgresql_where=sa.text("status = 'PENDING'::status"))
    op.drop_table('group_invitations')
    op.drop_index(op.f('ix_user_profiles_name'), table_name='user_profiles')
    op.drop_table('user_profiles')
    op.drop_index(op.f('ix_groups_name'), table_name='groups')
    op.drop_index(op.f('ix_groups_creator_id'), table_name='groups')
    op.drop_table('groups')
    op.drop_index(op.f('ix_users_login'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
